#include <iostream>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <vector>

using namespace std;


class Graph {
private:
    int begin_index;
    int end_index;
    int size_Graph;
    int waySize_Graph;
    vector<int> FIKS;
    vector<int> MIN_WEG;
    vector<int> VON_PUNKT;
    vector< vector<int> > DUG;
    int min = INT_MAX;
    int min_index = INT_MAX;
    int max = INT_MAX;
    
public:



    Graph(int size) {
        size_Graph = size;
        FIKS.reserve(size_Graph);
        MIN_WEG.reserve(size_Graph);
        VON_PUNKT.reserve(size_Graph);
        DUG.reserve(size_Graph);
        
        
        for (int i = 0; i < size_Graph; i++) {
            FIKS.push_back(0);
            VON_PUNKT.push_back(0);
            //MIN_WEG.push_back(max);
            vector<int> temp(size_Graph);
            DUG.push_back(temp);
        }
        //MIN_WEG[0] = 0;
    };

    void make_Graph(int begin) {
        vector<int> temp(size_Graph);
        for (int i = 0; i < size_Graph; i++) {
            temp.push_back(INT_MAX);

        }
        begin_index = begin;
        int a;
        for (int i = 0; i < size_Graph; i++) {
            DUG[i][i] = INT_MAX;
            for (int j = i + 1; j < size_Graph; j++) {
                printf("Введите расстояние %d - %d: ", i + 1, j + 1);
                cin >> a;
                if(a == 0) {a = INT_MAX;};
                
                DUG[i][j] = a;
                DUG[j][i] = a;
            }
            
        }
        for(int i = 0; i < size_Graph; i++){
            MIN_WEG[i] = DUG[begin][i];
        }
        FIKS[begin] = 1;
        VON_PUNKT[0] = 0;
        
        

    };

    void D(int end) {
        
    end_index = end;
    
    do{   
    min_index = INT_MAX;
    min = INT_MAX;
    int temp;
    for (int i = 0; i<size_Graph; i++){ 
      if ((FIKS[i] == 0) and (MIN_WEG[i] < min))
      { 
        min = MIN_WEG[i];
        min_index = i;
       
      }
    }
    
    if (min_index != INT_MAX){
      for (int i = 0; i<size_Graph; i++){
           
        if (DUG[min_index][i] < INT_MAX and FIKS[i] == 0){ 
           
          temp = min + DUG[min_index][i];
          if (temp < MIN_WEG[i])
          {
            MIN_WEG[i] = temp;
            
          }
        }
      }
      FIKS[min_index] = 1;
    }
    }while(min_index < INT_MAX);
  
  /*for (int i = 0; i < size_Graph; i++) {
            cout << MIN_WEG[i] << endl;
        }*/
        
  
  //cout << end_index << begin_index;
  VON_PUNKT[0] = end_index + 1; 
  int k = 1;
  int weight = MIN_WEG[end_index]; 
  
      while(begin_index != end_index){
      
   for(int i = 0; i < size_Graph; i++){
      if (DUG[i][end_index] < INT_MAX){
         // cout<<DUG[i][end_index]<< " "<<weight - DUG[i][end_index] << " " << MIN_WEG[i]<< endl;
          if(weight - DUG[i][end_index] == MIN_WEG[i] or weight - DUG[i][end_index] == 0){
              VON_PUNKT[k] = i + 1;
              k++;
              weight = weight - DUG[i][end_index];
              end_index = i;
              //cout << end_index << begin_index << endl;
          }
      };
  }
      }
      
 /*while (end_index != begin_index) 

  {

   for (int i = 0; i < size_Graph; i++) 

    if (DUG[i][end_index] < INT_MAX) 

    {

     int length = weight - DUG[i][end_index]; 

     if (length == MIN_WEG[i]) 

     { 

      weight = length;

      end_index = i; 

      MIN_WEG[k] = i + 1; 

      k++;

     }

    }

  }
     for (int i = 0; i < size_Graph; i++) {
            cout << VON_PUNKT[i] << endl;
        }   */
    };

    void print() {
        for(int i = size_Graph - 1; i >= 0; i--){
            if(VON_PUNKT[i] != 0){
                cout << VON_PUNKT[i];
            }
        
        };
        

    }
    
    
};

int main()
{
    Graph Graph1(6);
    Graph1.make_Graph(0);
    Graph1.D(4);
    Graph1.print();
    return 0;
};
