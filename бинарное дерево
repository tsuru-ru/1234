# include <iostream>
#include <iomanip>
#include <stdio.h>
using namespace std;

struct bin_node
{
    int data;
    struct bin_node* left;
    struct bin_node* right;
};

struct bin_tree
{
    struct bin_node* root;
};

class BinaryTree {
private:
    bin_node* Root_BinaryTree = NULL;
    int count_BinaryTree = 0;

public:
    BinaryTree() {
        bin_tree* Root_BinaryTree = new bin_tree;
    }

    void pushElement(int aElement) {

        bin_node* newElement = new bin_node;
        newElement->data = aElement;
        newElement->left = NULL;
        newElement->right = NULL;
        if (Root_BinaryTree != 0) _pushElement(aElement, Root_BinaryTree, newElement);
        else Root_BinaryTree = newElement;
        count_BinaryTree++;

    }

    bin_node* get() {
        return Root_BinaryTree;
    }
    void _pushElement(int aElement, bin_node* atemp, bin_node* anewp) {
        
        if (atemp->data >= aElement) {
            if (atemp->left == NULL) {
                atemp->left = anewp;

            }
            else {
                atemp = atemp->left;
                _pushElement(aElement, atemp, anewp);
            }
        }

        else if (atemp->data < aElement) {
            if (atemp->right == 0) {
                atemp->right = anewp;
                

            }
            else {
                atemp = atemp->right;
                _pushElement(aElement, atemp, anewp);

            }
        }
        else cout << "no";

    }


    

    void print(bin_node* t, int a)
    {  FILE* file = fopen("3.txt", "a");


        if (t) {
            
            
            fprintf(file, "%d ",t->data);
            fclose(file);
            print(t->left, a-3);
            print(t->right,  a+3 );
            
        }
        
    }


};



int main() {
    BinaryTree T;
    int data[13] = { 19, 3, 20, 03, 1, 9, 20, 21, 92, 74, 78, 24, 80 };
    for (int i = 0; i < 13; i++) {
        T.pushElement(data[i]);
    }
    T.print(T.get(), 1);

    return 0;
}
